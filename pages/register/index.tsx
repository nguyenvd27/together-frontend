import type { NextPage } from 'next';
import { SyntheticEvent, useState, ChangeEvent, MouseEvent } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import axios from 'axios';
import Cookies from 'js-cookie';
import Link from "next/link"

import FormControl from '@mui/material/FormControl';
import FormHelperText from '@mui/material/FormHelperText';
import InputLabel from '@mui/material/InputLabel';
import OutlinedInput from '@mui/material/OutlinedInput';
import IconButton from '@mui/material/IconButton';
import InputAdornment from '@mui/material/InputAdornment';
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';
import Button from '@mui/material/Button';

interface State {
  name: string,
  email: string;
  password: string;
  showPassword: boolean;
}

const Register: NextPage = () => {
  const router = useRouter();

  const [name, setName] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [showPassword, setShowPassword] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  const handleChange =
    (prop: keyof State) => (event: ChangeEvent<HTMLInputElement>) => {
      if(prop == 'email') {
        setEmail(event.target.value)
      } else if (prop == 'password') {
        setPassword(event.target.value)
        setError('')
      } else if (prop == 'name') {
        setName(event.target.value)
      }
    };

  const handleClickShowPassword = () => {
    setShowPassword(!showPassword)
  };

  const handleMouseDownPassword = (
    event: MouseEvent<HTMLButtonElement>
  ) => {
    event.preventDefault();
  };

  const register = async (e: SyntheticEvent) => {
    e.preventDefault();

    try {
      const response = await axios.post('/register', {
        name,
        email,
        password
      });

      console.log('response: ', response);
      Cookies.set('token', response.data.token, { expires: 1/24 });

      localStorage.setItem('user', JSON.stringify(response.data.user));

      router.push('/');
    } catch (err: any) {
      setError('email already exists!');
      console.log(err.response);
    }
  };

  return (
    <div>
      <Head>
        <title>Register</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="box-center">
        <h1>Register</h1>
      </div>

      <FormControl sx={{ m: 1, width: '50ch' }} variant="outlined">
        <InputLabel htmlFor="outlined-adornment-name">Name</InputLabel>
        <OutlinedInput
          id="outlined-adornment-name"
          value={name}
          onChange={handleChange('name')}
          label="Name"
        />
      </FormControl>

      <FormControl sx={{ m: 1, width: '50ch' }} variant="outlined">
        <InputLabel htmlFor="outlined-adornment-email">Email</InputLabel>
        <OutlinedInput
          id="outlined-adornment-email"
          value={email}
          onChange={handleChange('email')}
          label="Email"
        />
      </FormControl>

      <FormControl sx={{ m: 1, width: '50ch' }} variant="outlined">
        <InputLabel htmlFor="outlined-adornment-password">Password</InputLabel>
        <OutlinedInput
          id="outlined-adornment-password"
          error={error !== ''}
          type={showPassword ? 'text' : 'password'}
          value={password}
          onChange={handleChange('password')}
          endAdornment={
            <InputAdornment position="end">
              <IconButton
                aria-label="toggle password visibility"
                onClick={handleClickShowPassword}
                onMouseDown={handleMouseDownPassword}
                edge="end"
              >
                {showPassword ? <VisibilityOff /> : <Visibility />}
              </IconButton>
            </InputAdornment>
          }
          label="Password"
        />
        <FormHelperText color="error">
          {error !== '' ? error : ' '}
        </FormHelperText>
      </FormControl>

      <div>
        <Link href="/login">
          <a style={{margin: "8px", color: "#1976d2"}}>Login</a>
        </Link>
      </div>

      <div className="box-center">
        <Button variant="outlined" onClick={register}>
          Register
        </Button>
      </div>
    </div>
  );
};

export default Register;
