import type { NextPage } from 'next';
import { SyntheticEvent, useState, ChangeEvent, useContext, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import axios from 'axios';
import Cookies from 'js-cookie';
import Link from "next/link"

import AuthContext from '../../context/authContext';

import withLogin from '../../hocs/withLogin';

import FormControl from '@mui/material/FormControl';
import FormHelperText from '@mui/material/FormHelperText';
import InputLabel from '@mui/material/InputLabel';
import OutlinedInput from '@mui/material/OutlinedInput';
import IconButton from '@mui/material/IconButton';
import InputAdornment from '@mui/material/InputAdornment';
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';
import Button from '@mui/material/Button';


import * as React from 'react';
import Avatar from '@mui/material/Avatar';
import CssBaseline from '@mui/material/CssBaseline';
import TextField from '@mui/material/TextField';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';
import Paper from '@mui/material/Paper';
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import LockOutlinedIcon from '@mui/icons-material/LockOutlined';
import Typography from '@mui/material/Typography';
import { createTheme, ThemeProvider } from '@mui/material/styles';

import Layout from '../../components/layout';
import {useAuth} from '../../hooks/authContext';

interface State {
  email: string;
  password: string;
  showPassword: boolean;
}

const Login: NextPage = () => {
  const router = useRouter();

  // const {isLogin} = useContext(AuthContext)
  const {isLogin} = useAuth();

  console.log("isLogin111: ", isLogin)

  // useEffect(() => {
  //   if(isLogin) {
  //     router.replace("/")
  //   }
  // },[])

  // const token = Cookies.get('token');
  // const [isLogin] = useState(!!token);
  useEffect(() => {
    if(isLogin) {
      router.replace("/")
    }
  }, []);

  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [showPassword, setShowPassword] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  const handleChange =
  (prop: keyof State) => (event: ChangeEvent<HTMLInputElement>) => {
    if(prop == 'email') {
      setEmail(event.target.value)
    } else if (prop == 'password') {
      setPassword(event.target.value)
      setError('')
    }
  };

  const handleClickShowPassword = () => {
    setShowPassword(!showPassword)
  };

  const handleMouseDownPassword = (
    event: React.MouseEvent<HTMLButtonElement>
  ) => {
    event.preventDefault();
  };

  const login = async (e: SyntheticEvent) => {
    try {
      const response = await axios.post('/login', {
        email: email,
        password: password,
      });

      console.log('response: ', response);
      Cookies.set('token', response.data.token, { expires: 1/24 });

      localStorage.setItem('user', JSON.stringify(response.data.user));

      router.push('/');
    } catch (err: any) {
      setError('invalid credentials!');
      console.log(err.response);
    }
  };

  const theme = createTheme();

  return (
    <Layout>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="box-center">
        <h1>Login</h1>
      </div>

      <FormControl sx={{ m: 1, width: '50ch' }} variant="outlined">
        <InputLabel htmlFor="outlined-adornment-email">Email</InputLabel>
        <OutlinedInput
          id="outlined-adornment-email"
          value={email}
          onChange={handleChange('email')}
          label="Email"
        />
      </FormControl>

      <FormControl sx={{ m: 1, width: '50ch' }} variant="outlined">
        <InputLabel htmlFor="outlined-adornment-password">Password</InputLabel>
        <OutlinedInput
          id="outlined-adornment-password"
          error={error !== ''}
          type={showPassword ? 'text' : 'password'}
          value={password}
          onChange={handleChange('password')}
          endAdornment={
            <InputAdornment position="end">
              <IconButton
                aria-label="toggle password visibility"
                onClick={handleClickShowPassword}
                onMouseDown={handleMouseDownPassword}
                edge="end"
              >
                {showPassword ? <VisibilityOff /> : <Visibility />}
              </IconButton>
            </InputAdornment>
          }
          label="Password"
        />
        <FormHelperText color="error">
          {error !== '' ? error : ' '}
        </FormHelperText>
      </FormControl>
      
      <div>
        <Link href="/register">
          <a style={{margin: "8px", color: "#1976d2"}}>Register account</a>
        </Link>
      </div>

      <div className="box-center">
        <Button variant="outlined" onClick={login}>
          Login
        </Button>
      </div>
    </Layout>

    // <ThemeProvider theme={theme}>
    //   <Grid container component="main" sx={{ height: '100vh' }}>
    //     <CssBaseline />
    //     <Grid
    //       item
    //       xs={false}
    //       sm={4}
    //       md={7}
    //       sx={{
    //         backgroundImage: 'url(https://source.unsplash.com/random)',
    //         backgroundRepeat: 'no-repeat',
    //         backgroundColor: (t) =>
    //           t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],
    //         backgroundSize: 'cover',
    //         backgroundPosition: 'center',
    //       }}
    //     />
    //     <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>
    //       <Box
    //         sx={{
    //           my: 8,
    //           mx: 4,
    //           display: 'flex',
    //           flexDirection: 'column',
    //           alignItems: 'center',
    //         }}
    //       >
    //         <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>
    //           <LockOutlinedIcon />
    //         </Avatar>
    //         <Typography component="h1" variant="h5">
    //           Sign in
    //         </Typography>
    //         <Box component="form" noValidate sx={{ mt: 1 }}>
    //           <TextField
    //             margin="normal"
    //             required
    //             fullWidth
    //             id="email"
    //             label="Email Address"
    //             name="email"
    //             autoComplete="email"
    //             autoFocus
    //           />
    //           <TextField
    //             margin="normal"
    //             required
    //             fullWidth
    //             name="password"
    //             label="Password"
    //             type="password"
    //             id="password"
    //             autoComplete="current-password"
    //           />
    //           <FormControlLabel
    //             control={<Checkbox value="remember" color="primary" />}
    //             label="Remember me"
    //           />
    //           <Button
    //             type="submit"
    //             fullWidth
    //             variant="contained"
    //             sx={{ mt: 3, mb: 2 }}
    //           >
    //             Sign In
    //           </Button>
    //           <Grid container>
    //             <Grid item xs>
    //               <Link href="#">
    //                 Forgot password?
    //               </Link>
    //             </Grid>
    //             <Grid item>
    //               <Link href="#">
    //                 {"Don't have an account? Sign Up"}
    //               </Link>
    //             </Grid>
    //           </Grid>
    //         </Box>
    //       </Box>
    //     </Grid>
    //   </Grid>
    // </ThemeProvider>
  );
};

// export const getStaticProps = async (context: any) => {
//   // const {isLogin} = useContext(AuthContext);
//   // console.log("AuthContext: ", AuthContextz)
//   // context.req.headers

//   const isLogin = !!Cookies.get('token');
//   console.log("headers: ", context)
//   if (true)
//     return {
//       redirect: {
//         destination: '/',
//         permanent: false,
//       },
//     };

//   return {
//     props: {},
//   };
// }

export default Login;
